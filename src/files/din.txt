№1 Данные, которые создаются, инициализируются и уничтожаются по требованию программиста называются...
1) глобальными
2) статическими
3) кинематические
4) динамическими
№2 Какая память выделяется еще до начала работы программы, на стадии компиляции и сборки?
1) глобальная
2) динамическая
3) стековая
4) статическая
№3  Какая память выделяется в момент входа в функцию или блок и освобождается в момент выхода из функции или блока
1) глобальная
2) динамическая
3) статическая
4) стековая
№4 Для чего используется malloc?
1) Освободить от физической культуры
2) Освободить участок памяти
3) Захватить мир
4) Захватить участок памяти
№5 Для чего используется free?
1) Освободить от физической культуры
2) Захватить участок памяти
3) Захватить мир
4) Освободить участок памяти
№6 Как правильно выглядит прототип фунцкии malloc?
1) int *malloc(size_t n);
2) void malloc(size_t n);
3) int malloc(size_t n);
4) void *malloc(size_t n);
№7 Как правильно выглядит прототип фунцкии free?
1) void *free(void *p);
2) int *free(void *p);
3) int free(void *p);
4) void free(void *p);
№8 Что значит n в функции malloc(size_t n)?
1) количество элементов массива
2) номер варианта
3) указатель на выделенную память
4) размер захватываемого участка в байтах
№9 Что возвращает malloc в случае, если память выделелась?
1) выкидывает исключение
2) номер варианта
3) указатель на выделенную память
4) адрес захваченного участка памяти
№10 Что возвращает malloc в случае, если память не выделелась?
1) выкидывает исключение
2) nullptr
3) 0
4) NULL
№11 В какой библиотеке содержаться опиcания прототипов функций malloc и free?
1) math.h
2) cstring
3) string
4) stdlib.h
№12 Какую библиотеку нужно подключить, для работы функций new и delete?
1) math.h
2) stdlib.h
3) iostream
4) никакую
№13 В Си  p = (double*)  malloc(sizeof(double)); а как в С++?
1) p = double new;
2) p = double;
3) p = new;
4) p = new double;
№14 Как провести инициализацию?
1) double *p = new double=1.5;
2) нельзя проводить инициализацию
3) double *p = new double; *p = 1.5;
4) double *p = new double(1.5);
№15 Как выделить память под массив размером m*n?
1) a = new m*n*double
2) никак
3) a = new double;
4) a = new double[m * n];
№16 Как освободить память выделенную под массив?
1) del[]
2) del
3) delete
4) delete[]
№17 с помощью чего можно осовободить память выделенную оператором new?
1)del
2)free
3)delete и free
4)delete
№18 Для чего используется new?
1) Освободить от физической культуры
2) Освободить участок памяти
3) Захватить мир
4) Захватить участок памяти
№19 Для чего используется delete?
1) Освободить от физической культуры
2) Захватить участок памяти
3) Захватить мир
4) Освободить участок памяти
№20 Можно ли присваивать указателю одного типа значение указателя этого же типа?
1) нет 
2) нужна специальная функция
3) не знаю
4) можно
№21 Для чего нужна функция calloc()?
1) Выделяет память длиной в n байт и возвращает указатель на начало выделенной памяти
2) Освобождает ранее выделенный блок памяти, на начало которого указывает указатель n
3) Изменяет размер ранее выделенного блока памяти, на начало которого указывает указатель a, до размера в n байт
4) Выделяет память для n элементов по m байт каждый и возвращает указатель на начало выделенной памяти
№22 Для чего нужна функция realloc()?
1) Выделяет память длиной в n байт и возвращает указатель на начало выделенной памяти
2) Освобождает ранее выделенный блок памяти, на начало которого указывает указатель n
3) Выделяет память для n элементов по m байт каждый и возвращает указатель на начало выделенной памяти
4) Изменяет размер ранее выделенного блока памяти, на начало которого указывает указатель a, до размера в n байт
№23 Выберите правильный прототип для функции calloc()
1) void *calloc(int n, int m);
2) void calloc(int n, int m);
3) void calloc(unsigned n, unsigned m);
4) void *calloc(unsigned n, unsigned m);
№24 Когда происходит утечка данных?
1) Когда не написал в конце main return 0;
2) Когда ставишь простой пароль
3) Когда не меняешь пароль в течении года
4) Когда забыл освободить выделенную память
№25 Как привести к типу int указатель p
1) p = int*malloc(size * sizeof(int));
2) p = int malloc(size * sizeof(int));
3) p = malloc(size * sizeof(int));
4) p = (int*) malloc(size * sizeof(int));
№26 Как создать динамический двумерный массив?
1) Обратиться к препроцессору
2) Есть специальная функция MakeArray()
3) Так же как и обычный массив
4) Сначала необходимо создать массив указателей, после чего каждому из элементов этого массива присвоить адрес нового массива
№27 Что не является преимуществом динамического массива над обычным
1) Создавать массивы "неправильной формы", то есть массив строк, каждая из которых имеет свой размер
2) Работать по отдельности с каждой строкой массива: освобождать память или изменять размер строки
3) Можно изменять размер массива при работе с ним
4) Динамический массив проще передавать в функции
№27 Из-за чего появляются висячие указатели?
1) Когда мы не указали какого типа указатель
2) Когда не освободили память
3) Программист их преднамеренно "вешает" в стек
4) Когда после очищения памяти, не изменили значение указателя на NULL
№28 Что будет, если вызвать malloc c нулевым запросом
1) Ошибка
2) адрес, которым можно пользоваться, но нельзя разадресовывать
3) Возвращение NULL
4) Поведение не предопределенно
№29 Счастливый билет! Какая фамилия у ректора нашего вуза?
1) Симкин
2) Попков
3) Шкаберин
4) Федонин
№30 Что такое динамическая память с произвольным доступом?
1) Запоминающее устройство произвольного доступа, основанное на принципе магнитной записи
2) Энергозависимая часть системы компьютерной памяти, в которой во время работы компьютера хранится выполняемый машинный код
3) Разновидность полупроводниковой технологии электрически перепрограммируемой памяти
4) Тип памяти, отличающийся использованием полупроводниковых материалов, энергозависимостью и возможностью доступа к данным, хранящимся в произвольных ячейках памяти